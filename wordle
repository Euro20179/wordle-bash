#!/bin/bash
clear


mul_str (){
  new_str="$str"
  str="$1"
  times="$2"
  for ((i=0; i<$times; i++)); do
    new_str="$new_str$str"
  done
  printf "%s" "$new_str"
}

usage () {
  printf "%s\n" "wordle [-ulLf]" "Options:"
  declare -A opts
  opts[u]="whether or not to use strictly bash (can be slow)"
  opts[l]="amount of lives, default: 5"
  opts[L]="length of answer word, default: 5"
  opts[f]="specify a word list file, default: $HOME/Documents/words.txt"
  for opt in ${!opts[@]}; do
    printf "\t-%-5s%s\n" "$opt" "${opts[$opt]}"
  done
  printf "%s\n" "Shortcuts:"
  declare -A shortcuts
  shortcuts[c-a]="print answer"
  shortcuts[c-l]="set a new word length (does nothing else)"
  shortcuts[c-r]="reset game"
  shortcuts[c-n]="generate new word"
  shortcuts[c-p]="clear screen"
  for shortcut in ${!shortcuts[@]}; do
    printf "\t%-6s%s\n" "$shortcut" "${shortcuts[$shortcut]}"
  done
}

use_bash_only=1
wordlen=5
lives=5
words_list_path="$HOME/Documents/words.txt"
while getopts "ul:L:f:h" opt; do
  case "$opt" in
    u) use_bash_only=0 ;;
    l) lives=$OPTARG ;;
    L) wordlen=$OPTARG ;;
    f) words_list_path=$OPTARG ;;
    h) usage; exit ;;
  esac
done
shift $((OPTIND-1))


gen_board () {
  for ((i=0; i<lives; i++)); do
    board[${#board[@]}]="$(mul_str "_" $wordlen)" 
  done
}


get_words () {
  [ "$use_bash_only" -eq 0 ] && grep "^[[:lower:]].\{$((wordlen-1))\}$" "$words_list_path" || {
    pattern="[[:lower:]]$(mul_str ? $((wordlen - 1)))"
    while read line; do
      case "$line" in
        $pattern) printf "%s\n" "$line" ;;
      esac
    done < "$words_list_path"
  }
}

readarray words <<< "$(get_words)"

declare -a board
gen_board
declare -a guesses
declare -a guess_info

print_guess () {
  printf "\033[s"
  printf "\033[0;0HGUESS:"
  printf "\033[u"
}

print_board () {
  printf "\033[s"
  printf "\033[2;0H"
  for ((i=0; i<${#board[@]}; i++)); do
    local curr_guess="${guess_info[$i]}"
    local curr_word="${board[$i]}"
    for ((l=0; l<wordlen; l++)); do
      case "${curr_guess:$l:1}" in
        0) printf "\033[31m" ;;
        1) printf "\033[32m" ;;
        2) printf "\033[33m" ;;
      esac
      printf "${curr_word:$l:1} "
    done
    printf "\n"
  done
  printf "\033[u\033[0m"
}

clear_line () {
  printf "\033[K"
}

print_err () {
  local fmt="$1"
  shift
  print_info "\033[31m]$fmt" "$@"
}

print_info () {
  local fmt="$1"
  shift
  printf "\033[s"
  printf "\033[$LINES;0H"
  clear_line
  printf "$fmt" "$@"
  printf "\033[u"
}

generate_new_word () {
  selected_word="${words[$((RANDOM % ${#words[@]}))]}"
  set -- $selected_word
  selected_word="$@"
}

get_letter_correctness (){
  local word="$1"
  local correctness=
  for ((i=0; i<${#word}; i++)); do
    if [ "${word:$i:1}" = "${selected_word:$i:1}" ]; then
      correctness="${correctness}1"
    elif [[ "${selected_word}" =~ ${word:$i:1} ]]; then
      correctness="${correctness}2"
    else correctness="${correctness}0"
    fi
  done
  printf "%s" "$correctness"
}

get_ans () {
  print_info "%s" "$selected_word" 
}

set_word_length () {
  [ -z "$1" ] && read -e -p "new length: " wl
  wordlen=${1:-$wl}
  board=()
  gen_board
  print_info "%s" "word length set to ${1:-$wl}"
  bind_key=1
}

reset_game () {
  board=()
  guesses=()
  guess_info=()
  guessNo=0
  print_info "%s" "game reset"
  gen_board 
}

get_new_word () {
  readarray <<< "$(get_words)"
  generate_new_word
  print_info "%s" "generated new word with length: $wordlen"
}

main () {
  print_guess
  printf "\033[$((lives+2));0H"
  print_board
  local guessNo=0
  set -o emacs
  bind -x '"\C-a":get_ans'
  bind -x '"\C-l":set_word_length'
  bind -x '"\C-r":reset_game'
  bind -x '"\C-n":get_new_word'
  bind -x '"\C-p":clear'
  while read -e ; do
    [ ${bind_key:-0} -eq 1 ] && bind_key=0 && printf "\033[2K" && continue
    clear
    print_guess
    case $REPLY in
      w:ans|w:a) get_ans ;;
      w:word-length*|w:wl*) set_word_length "${REPLY#*=}" ;;
      w:reset|w:r) reset_game ;;
      w:new-word|w:nw) get_new_word ;;
      *$selected_word*) printf "\033[32m%s\033[0m\n" "YOU WIN with $((lives-guessNo)) lives remaining"; break ;;
      $(mul_str "?" "$wordlen"))
        if [[ "${words[@]}" =~ $REPLY ]]; then
          guesses[guessNo]=$REPLY 
          board[guessNo]="$REPLY" 
          guess_info[guessNo]=$(get_letter_correctness "$REPLY")
          (( guessNo++ ))
        else
          print_info "%s" "$REPLY not in word list"
        fi
        ;;
      *) print_err "%s" "invalid word ($REPLY)" ;;
    esac
    printf "\033[$((lives+2));0H"
    print_board
    (( guessNo >= lives )) && printf "\033[31m%s\033[0m\n" "YOU LOSE, the word was $selected_word" && break
  done
}

generate_new_word

main
